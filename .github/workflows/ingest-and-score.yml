name: Ingest iNat and Score v7

on:
  workflow_dispatch:
  push:
    paths:
      - ".github/workflows/ingest-and-score.yml"
      - "ingest.mjs"
      - "sql/**"

permissions:
  contents: read

concurrency:
  group: ingest-and-score
  cancel-in-progress: true

jobs:
  ingest-and-score:
    runs-on: ubuntu-latest

    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      INAT_BASE: ${{ secrets.INAT_BASE }}
      ASSIGNMENT_IDS: ${{ secrets.ASSIGNMENT_IDS }}
      RATE_LIMIT_RPS: ${{ secrets.RATE_LIMIT_RPS }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        shell: bash
        run: |
          if [ -f package-lock.json ]; then npm ci; fi

      - name: Install psql client
        shell: bash
        run: |
          sudo apt-get update -y
          sudo apt-get install -y postgresql-client

      - name: Test DB Connection and Set URL
        id: pickdb
        shell: bash
        run: |
          set -euo pipefail
          echo "Attempting to connect with Pooler URL..."
          # Use the Pooler URL directly. psql can parse the full URL.
          # The password is part of the secret URL itself.
          if psql "${{ secrets.SUPABASE_POOL_URL }}" -c "select 1;" >/dev/null 2>&1; then
            echo "Pooler connection successful."
            # Set the output for subsequent steps
            echo "use_url=${{ secrets.SUPABASE_POOL_URL }}" >> "$GITHUB_OUTPUT"
          else
            echo "Pooler connection failed. Please double-check your SUPABASE_POOL_URL secret and password."
            exit 1
          fi

      - name: Run iNat ingestion
        shell: bash
        run: |
          set -euo pipefail
          node ingest.mjs

      - name: Generate SQL with correct id column
        id: gensql
        shell: bash
        env:
          USE_URL: ${{ steps.pickdb.outputs.use_url }}
        run: |
          set -euo pipefail
          check_col () { psql "$USE_URL" -Atc "select 1 from information_schema.columns where table_schema='public' and table_name='daily_scores' and column_name='$1'" | grep -q 1; }
          if   check_col student_id; then ID_COL=student_id
          elif check_col roster_id;  then ID_COL=roster_id
          elif check_col person_id;  then ID_COL=person_id
          else
            echo "daily_scores must have one of: student_id, roster_id, person_id"
            exit 1
          fi
          echo "Detected ID_COL=$ID_COL"
          sed -e "s/__ID_COL__/${ID_COL}/g" sql/leaderboard_views.template.sql > sql/_gen_leaderboard_views.sql

      - name: Apply / update views (idempotent)
        shell: bash
        env:
          USE_URL: ${{ steps.pickdb.outputs.use_url }}
        run: |
          set -euo pipefail
          psql "$USE_URL" -v ON_ERROR_STOP=1 -f sql/_gen_leaderboard_views.sql
