name: Ingest iNaturalist Data and Score

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  data-pipeline:
    name: Fetch, Ingest, and Process Data
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js LTS (v20)
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies
        run: npm install

      # =================================================================
      # ROBUSTNESS: Validate Secret Content Structure
      # Verify the format of the secrets without exposing them (checks length and prefixes).
      # This diagnoses if the application's schema validation is failing due to malformed inputs.
      # =================================================================
      - name: Forensic Secret Content Validation
        run: |
          echo "Validating secret content structure (Lengths and Prefixes)..."

          # Capture secrets securely into local variables
          S_URL="${{ secrets.SUPABASE_URL }}"
          SERVICE_KEY="${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}"
          ANON_KEY="${{ secrets.SUPABASE_ANON_KEY }}"

          # 1. Validate SUPABASE_URL (Must be a valid Supabase URL)
          echo "SUPABASE_URL Length: ${#S_URL}"
          if [[ ! "$S_URL" =~ ^https://.*\.supabase\.co$ ]]; then
            echo "::error::VALIDATION FAILURE: SUPABASE_URL does not match the expected format (https://<project-ref>.supabase.co). Please check the secret value in Repository Settings."
            exit 1
          fi

          # 2. Validate ANON_KEY (JWT format, starts with 'ey')
          echo "SUPABASE_ANON_KEY Length: ${#ANON_KEY}"
          if [[ ! "$ANON_KEY" =~ ^ey.* ]]; then
            echo "::error::VALIDATION FAILURE: SUPABASE_ANON_KEY does not start with 'ey' (expected JWT format). Please check the secret value."
            exit 1
          fi

          # 3. Validate SERVICE_ROLE_KEY (JWT format, starts with 'ey')
          echo "SUPABASE_SERVICE_ROLE_KEY Length: ${#SERVICE_KEY}"
          if [[ ! "$SERVICE_KEY" =~ ^ey.* ]]; then
             echo "::error::VALIDATION FAILURE: SUPABASE_SERVICE_ROLE_KEY does not start with 'ey' (expected JWT format). Please check the secret value."
            exit 1
          fi
          echo "All critical secrets validated for content structure."

      # =================================================================
      # CRITICAL FIX: Direct Environment Injection with Comprehensive Aliasing
      # We bypass .env files and dotenv entirely. We inject all required
      # variables and their aliases directly into the environment of the Node.js process.
      # =================================================================
      - name: Run Data Ingestion
        run: node ingest.mjs
        env:
          # --- Supabase SDK Variables ---
          # Standard backend names
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

          # Framework conventions (Next.js, Vite) - These use the Anon Key
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          VITE_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

          # Generic Aliases (Use Service Key for generic backend access)
          SUPABASE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

          # --- Database Connection Variables (Using the Pooler URL) ---
          # Supabase-specific and Conventional names (PostgreSQL/Prisma)
          SUPABASE_DB_URL: ${{ secrets.SUPABASE_POOL_URL }}
          DATABASE_URL: ${{ secrets.SUPABASE_POOL_URL }}
          POSTGRES_URL: ${{ secrets.SUPABASE_POOL_URL }}

          # --- iNaturalist and Application variables ---
          INAT_BASE: ${{ secrets.INAT_BASE }}
          ASSIGNMENT_IDS: ${{ secrets.ASSIGNMENT_IDS }}
          RATE_LIMIT_RPS: ${{ secrets.RATE_LIMIT_RPS }}
          # NODE_ENV is injected directly without quotes
          NODE_ENV: production
