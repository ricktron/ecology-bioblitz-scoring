name: Ingest iNat and Score v7

on:
  workflow_dispatch:
  push:
    paths:
      - ".github/workflows/ingest-and-score.yml"
      - "ingest.mjs"
      - "sql/**"

permissions:
  contents: read

concurrency:
  group: ingest-and-score
  cancel-in-progress: true

jobs:
  ingest-and-score:
    runs-on: ubuntu-latest

    env:
      # HTTP API used by ingest.mjs
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

      # iNat knobs
      INAT_BASE: ${{ secrets.INAT_BASE }}
      ASSIGNMENT_IDS: ${{ secrets.ASSIGNMENT_IDS }}
      RATE_LIMIT_RPS: ${{ secrets.RATE_LIMIT_RPS }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install deps (ok if none)
        shell: bash
        run: |
          set -e
          if [ -f package-lock.json ]; then npm ci
          elif [ -f package.json ]; then npm i
          else echo "No package.json found; skipping"
          fi

      - name: Install psql client + dnsutils
        shell: bash
        run: |
          set -e
          sudo apt-get update -y
          sudo apt-get install -y postgresql-client dnsutils

      - name: Debug secrets presence (DB)
        shell: bash
        env:
          SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
          SUPABASE_POOL_URL: ${{ secrets.SUPABASE_POOL_URL }}
        run: |
          set -e
          for k in SUPABASE_DB_URL SUPABASE_POOL_URL; do
            v="${!k:-}"
            if [ -n "$v" ]; then echo "$k: SET"; else echo "$k: MISSING"; fi
          done

      - name: Pick DB URL and test connect
        id: pickdb
        shell: bash
        env:
          DB_URL_DIRECT: ${{ secrets.SUPABASE_DB_URL }}
          DB_URL_POOL:   ${{ secrets.SUPABASE_POOL_URL }}
        run: |
          set -euo pipefail

          PY_PARSER_SCRIPT="
          import sys, urllib.parse as U;
          u = U.urlparse(sys.argv[1]);
          print(u.username or '');
          print(u.password or '');
          print(u.hostname or '');
          print(str(u.port or 5432));
          p = (u.path or '/').lstrip('/');
          print((p.split('/')[0]) or 'postgres')
          "
          parse() {
            python3 -c "$PY_PARSER_SCRIPT" "$1"
          }

          try_url() {
            local url="$1" label="$2"
            if [ -z "${url:-}" ]; then
              echo "SKIP $label: empty url"
              return 1
            fi

            read -r UUSER UPASS UHOST UPORT UDB <<<"$(parse "$url")"
            echo "Test $label:"
            echo "  host=$UHOST port=$UPORT db=$UDB user=$UUSER"

            A="$(dig +short A "$UHOST" | head -1 || true)"
            AAAA="$(dig +short AAAA "$UHOST" | head -1 || true)"
            echo "  A=$A AAAA=$AAAA"

            export PGPASSWORD="$UPASS" PGSSLMODE=require
            if psql "$url" -v VERBOSITY=verbose -Atc "select 1" >/dev/null 2>&1; then
              echo "  psql ok"
              return 0
            fi

            if [ -n "$A" ]; then
              DSN="hostaddr=$A host=$UHOST port=$UPORT dbname=$UDB user=$UUSER sslmode=require"
              if psql "$DSN" -v VERBOSITY=verbose -Atc "select 1" >/dev/null 2>&1; then
                echo "  psql ok via IPv4 hostaddr"
                echo "use_url=$DSN" >> "$GITHUB_OUTPUT"
                return 0
              fi
            fi

            echo "  psql failed"
            return 1
          }

          USE_URL=""
          if try_url "${DB_URL_POOL:-}" "pooler"; then
            USE_URL="${DB_URL_POOL}"
          elif try_url "${DB_URL_DIRECT:-}" "direct"; then
            USE_URL="${DB_URL_DIRECT}"
          else
            echo "Could not reach either DB URL from GitHub Actions."
            echo "Hints:"
            echo "  - Both secrets must end with ?sslmode=require"
            echo "  - Project not paused"
            echo "  - Network Restrictions allow GitHub egress"
            exit 2
          fi

          echo "use_url=$USE_URL" >> "$GITHUB_OUTPUT"

      - name: Run iNat ingestion
        shell: bash
        run: |
          set -euo pipefail
          node ingest.mjs

      - name: Generate SQL with correct id column
        id: gensql
        shell: bash
        env:
          USE_URL: ${{ steps.pickdb.outputs.use_url }}
        run: |
          set -euo pipefail
          check_col () { psql "$USE_URL" -Atc "select 1 from information_schema.columns where table_schema='public' and table_name='daily_scores' and column_name='$1'" | grep -q 1; }
          if   check_col student_id; then ID_COL=student_id
          elif check_col roster_id;  then ID_COL=roster_id
          elif check_col person_id;  then ID_COL=person_id
          else
            echo "daily_scores must have one of: student_id, roster_id, person_id"
            exit 1
          fi
          echo "Detected ID_COL=$ID_COL"
          sed -e "s/__ID_COL__/${ID_COL}/g" sql/leaderboard_views.template.sql > sql/_gen_leaderboard_views.sql

      - name: Apply / update views (idempotent)
        shell: bash
        env:
          USE_URL: ${{ steps.pickdb.outputs.use_url }}
        run: |
          set -euo pipefail
          psql "$USE_URL" -v ON_ERROR_STOP=1 -f sql/_gen_leaderboard_views.sql
