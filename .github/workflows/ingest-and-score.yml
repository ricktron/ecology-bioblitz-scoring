name: Ingest iNat and Score • vENVDEBUG_POOLER_FIRST

on:
  workflow_dispatch:
  # Enable later if you want automation
  # schedule:
  #   - cron: "*/30 * * * *"
  push:
    paths:
      - ".github/workflows/ingest-and-score.yml"
      - "ingest.mjs"
      - "sql/**"

permissions:
  contents: read

concurrency:
  group: ingest-and-score
  cancel-in-progress: true

jobs:
  ingest-and-score:
    runs-on: ubuntu-latest

    # API + iNat knobs (used by ingest.mjs)
    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      INAT_BASE: ${{ secrets.INAT_BASE }}
      ASSIGNMENT_IDS: ${{ secrets.ASSIGNMENT_IDS }}
      RATE_LIMIT_RPS: ${{ secrets.RATE_LIMIT_RPS }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install deps (ok if none)
        shell: bash
        run: |
          set -e
          if [ -f package-lock.json ]; then npm ci
          elif [ -f package.json ]; then npm i
          else echo "No package.json found; skipping"
          fi

      - name: Run iNat ingestion script
        shell: bash
        run: |
          set -euo pipefail
          node -v
          node ingest.mjs

      - name: Install psql client
        run: |
          sudo apt-get update -y
          sudo apt-get install -y postgresql-client

      - name: Debug (shell) — DB secrets presence
        shell: bash
        env:
          SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
          SUPABASE_POOL_URL: ${{ secrets.SUPABASE_POOL_URL }}
        run: |
          set -e
          for k in SUPABASE_DB_URL SUPABASE_POOL_URL; do
            if [ -n "${!k:-}" ]; then echo "$k: SET"; else echo "$k: (missing)"; fi
          done

      # ── Prefer pooler first; fallback to direct DB if needed ─────────────────
      - name: Choose DB URL and handshake
        id: pickdb
        shell: bash
        env:
          SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
          SUPABASE_POOL_URL: ${{ secrets.SUPABASE_POOL_URL }}
        run: |
          set -euo pipefail
          USE_URL=""

          if [ -n "${SUPABASE_POOL_URL:-}" ]; then
            echo "Trying pooler (6543)…"
            if psql "${SUPABASE_POOL_URL}" -Atc "select 1" >/dev/null 2>&1; then
              USE_URL="${SUPABASE_POOL_URL}"
              echo "Pooler OK."
            else
              echo "Pooler URI failed."
            fi
          fi

          if [ -z "$USE_URL" ] && [ -n "${SUPABASE_DB_URL:-}" ]; then
            echo "Trying direct (5432)…"
            if psql "${SUPABASE_DB_URL}" -Atc "select 1" >/dev/null 2>&1; then
              USE_URL="${SUPABASE_DB_URL}"
              echo "Direct DB OK."
            else
              echo "Direct DB URI failed."
            fi
          fi

          if [ -z "$USE_URL" ]; then
            echo "::error title=DB handshake::Could not reach either DB URL from GitHub Actions.
            Hints: project running, URLs correct, keep '?sslmode=require'."
            exit 2
          fi

          echo "use_url=$USE_URL" >> "$GITHUB_OUTPUT"
          echo "USE_URL=$USE_URL" >> "$GITHUB_ENV"

      - name: Generate SQL with correct id column
        id: gensql
        shell: bash
        env:
          USE_URL: ${{ steps.pickdb.outputs.use_url }}
        run: |
          set -euo pipefail

          check_col () { psql "$USE_URL" -Atc "select 1 from information_schema.columns \
            where table_schema='public' and table_name='daily_scores' and column_name='$1'" | grep -q 1; }

          if check_col student_id; then ID_COL=student_id
          elif check_col roster_id; then ID_COL=roster_id
          elif check_col person_id; then ID_COL=person_id
          else
            echo "::error title=Missing id column::daily_scores must have one of: student_id, roster_id, person_id"
            exit 1
          fi

          echo "Detected ID_COL=${ID_COL}"
          sed -e "s/__ID_COL__/${ID_COL}/g" \
            sql/leaderboard_views.template.sql > sql/_gen_leaderboard_views.sql
          echo "id_col=$ID_COL" >> "$GITHUB_OUTPUT"

      - name: Apply / update views (idempotent)
        shell: bash
        env:
          USE_URL: ${{ steps.pickdb.outputs.use_url }}
        run: |
          set -euo pipefail
          echo "Handshake:"
          psql "$USE_URL" -Atc "select current_user, current_database(), inet_client_addr()"
          echo "Applying SQL…"
          psql "$USE_URL" -v ON_ERROR_STOP=1 -f sql/_gen_leaderboard_views.sql
