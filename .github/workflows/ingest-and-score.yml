name: Ingest & Score

on:
  workflow_dispatch:
  schedule:
    - cron: "*/15 * * * *"

# Single concurrency scope to avoid deadlocks across branches
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  run:
    runs-on: ubuntu-latest
    # (No job-level "concurrency:" here.)
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Preflight env check
        run: |
          set -euo pipefail
          ok=1
          for v in SUPABASE_URL SUPABASE_SERVICE_KEY INAT_PROJECT_SLUG; do
            val="${!v:-}"
            if [ -z "$val" ]; then
              echo "::error::Missing $v"; ok=0
            else
              echo "$v: present (len=${#val})"
            fi
          done
          [ "$ok" = "1" ] || exit 1
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
          INAT_PROJECT_SLUG: ${{ secrets.INAT_PROJECT_SLUG }}

      - name: Verify active config_filters
        run: |
          set -euo pipefail
          K="${SUPABASE_SERVICE_KEY:-${SUPABASE_SECRET_KEY:-${SUPABASE_SERVICE_ROLE_KEY:-}}}"
          r=$(curl -sS -H "apikey: $K" -H "Authorization: Bearer $K"               "$SUPABASE_URL/rest/v1/config_filters?id=is.${INAT_PROJECT_SLUG}&select=id")
          echo "config_filters lookup: $r"
          echo "$r" | grep -q "${INAT_PROJECT_SLUG}" || (echo "::error::No active config_filters row in DB"; exit 1)
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          INAT_PROJECT_SLUG: ${{ secrets.INAT_PROJECT_SLUG }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
          SUPABASE_SECRET_KEY: ${{ secrets.SUPABASE_SECRET_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

      - name: Ingest (retry on transient errors)
        run: |
          set -e
          for i in 1 2 3; do
            if node ingest.mjs; then
              echo "✅ ingest ok"; exit 0
            fi
            echo "⚠️ transient failure, retry #$i"; sleep $(( (RANDOM % 7 + 5) * i ))
          done
          echo "::error::Ingest failed after 3 attempts"; exit 1
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
          SUPABASE_SECRET_KEY: ${{ secrets.SUPABASE_SECRET_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          INAT_PROJECT_SLUG: ${{ secrets.INAT_PROJECT_SLUG }}
          INAT_MODE: ${{ vars.INAT_MODE }}
          TRIP_D1: ${{ vars.TRIP_D1 }}
          TRIP_D2: ${{ vars.TRIP_D2 }}
          TRIP_BBOX: ${{ vars.TRIP_BBOX }}
          OBS_TABLE: ${{ vars.OBS_TABLE }}
          OBS_ID_COLUMN: ${{ vars.OBS_ID_COLUMN }}
          OBS_UPDATED_AT_COLUMN: ${{ vars.OBS_UPDATED_AT_COLUMN }}
          SKIP_DELETES: ${{ vars.SKIP_DELETES }}
          ALERT_WEBHOOK_URL: ${{ secrets.ALERT_WEBHOOK_URL }}
