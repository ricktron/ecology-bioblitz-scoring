name: Ingest iNaturalist Data and Score

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  data-pipeline:
    name: Fetch, Ingest, and Process Data
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js LTS (v20)
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies
        # This will now install 'dotenv' along with other dependencies
        run: npm install

      # =================================================================
      # CRITICAL FIX: Synthesize .env File
      # The evidence proves that the script relies on loading configuration
      # from a .env file. We dynamically create this file from GitHub Secrets.
      # =================================================================
      - name: Create .env file from Secrets
        run: |
          echo "Synthesizing .env file..."
          # Write secrets into the .env file format (KEY=VALUE).
          # We use 'printf' for robust handling of potential special characters in secrets.
          # We access secrets directly within the run block using the GitHub Actions context.

          printf "SUPABASE_URL=%s\n" "${{ secrets.SUPABASE_URL }}" > .env
          printf "SUPABASE_SERVICE_ROLE_KEY=%s\n" "${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" >> .env

          # Ensure we map the Pooler URL (which works in GitHub Actions) to the DB URL expected by the app
          printf "SUPABASE_DB_URL=%s\n" "${{ secrets.SUPABASE_POOL_URL }}" >> .env

          printf "INAT_BASE=%s\n" "${{ secrets.INAT_BASE }}" >> .env
          printf "ASSIGNMENT_IDS=%s\n" "${{ secrets.ASSIGNMENT_IDS }}" >> .env
          printf "RATE_LIMIT_RPS=%s\n" "${{ secrets.RATE_LIMIT_RPS }}" >> .env
          printf "NODE_ENV=production\n" >> .env

          echo ".env file created successfully."
          # Note: GitHub Actions automatically masks these secrets in the logs.

      # Optional Diagnostic: Verify the contents (GitHub will automatically mask the values)
      - name: Verify .env file structure (Masked)
        run: cat .env

      # =================================================================
      # Execution Step
      # =================================================================
      - name: Run Data Ingestion
        # The script will now find the .env file, load the variables (likely via dotenv), and execute.
        # We do not need 'env:' injection here anymore, as the script reads from the file.
        run: node ingest.mjs
