name: Ingest iNaturalist → Supabase

on:
  workflow_dispatch:
    inputs:
      inat_project_slug:
        description: "iNaturalist project slug (leave blank if using TRIP_* inputs)"
        required: false
      trip_d1:
        description: "Trip start date YYYY-MM-DD (optional)"
        required: false
      trip_d2:
        description: "Trip end date YYYY-MM-DD (optional)"
        required: false
      trip_bbox:
        description: "Trip bounding box minLon,minLat,maxLon,maxLat (optional)"
        required: false
  push:
    branches: [ main ]
    paths:
      - ".github/workflows/ingest-and-score.yml"
      - "ingest.mjs"
  schedule:
    - cron: "*/30 * * * *"

permissions:
  contents: read

jobs:
  ingest:
    name: Ingest iNaturalist -> Supabase
    runs-on: ubuntu-24.04
    timeout-minutes: 30

    env:
      # ----- Supabase (Secret or Variable) -----
      SUPABASE_URL: ${{ secrets.SUPABASE_URL || vars.SUPABASE_URL }}
      SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY || vars.SUPABASE_SERVICE_KEY }}
      SUPABASE_SECRET_KEY: ${{ secrets.SUPABASE_SECRET_KEY || vars.SUPABASE_SECRET_KEY }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY || vars.SUPABASE_SERVICE_ROLE_KEY }}

      # ----- iNaturalist / Trip inputs (Run‑time input -> Secret -> Variable) -----
      INAT_PROJECT_SLUG: ${{ inputs.inat_project_slug || secrets.INAT_PROJECT_SLUG || vars.INAT_PROJECT_SLUG }}
      TRIP_D1: ${{ inputs.trip_d1 || secrets.TRIP_D1 || vars.TRIP_D1 }}
      TRIP_D2: ${{ inputs.trip_d2 || secrets.TRIP_D2 || vars.TRIP_D2 }}
      TRIP_BBOX: ${{ inputs.trip_bbox || secrets.TRIP_BBOX || vars.TRIP_BBOX }}

      # ----- Table mapping (Variables with safe defaults) -----
      OBS_TABLE: ${{ vars.OBS_TABLE || 'observations' }}
      OBS_ID_COLUMN: ${{ vars.OBS_ID_COLUMN || 'inat_obs_id' }}
      OBS_UPDATED_AT_COLUMN: ${{ vars.OBS_UPDATED_AT_COLUMN || 'updated_at' }}
      SKIP_DELETES: ${{ vars.SKIP_DELETES }}
      UPSERT_BATCH_SIZE: ${{ vars.UPSERT_BATCH_SIZE || '50' }}

      # Optional alert webhook (Secret or Variable)
      ALERT_WEBHOOK_URL: ${{ secrets.ALERT_WEBHOOK_URL || vars.ALERT_WEBHOOK_URL }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install deps (if package.json present)
        shell: bash
        run: |
          if [ -f package-lock.json ] || [ -f package.json ]; then
            npm ci --ignore-scripts --no-audit || npm i
          fi

      - name: Preflight – show effective config and validate
        shell: bash
        run: |
          set -euo pipefail
          echo '=== Environment Check ==='
          ok=1

          need_vars=(SUPABASE_URL)
          for v in "${need_vars[@]}"; do
            val="${!v:-}"
            if [ -z "$val" ]; then
              echo "::error::Missing $v"; ok=0
            else
              echo "$v: present (len=${#val})"
            fi
          done

          # At least one Supabase key
          if [ -z "${SUPABASE_SERVICE_KEY:-}${SUPABASE_SECRET_KEY:-}${SUPABASE_SERVICE_ROLE_KEY:-}" ]; then
            echo "::error::Missing Supabase key (need SUPABASE_SERVICE_KEY or SUPABASE_SECRET_KEY or SUPABASE_SERVICE_ROLE_KEY)"
            ok=0
          else
            echo "Supabase key: present"
          fi

          # Decide mode: PROJECT (slug) vs TRIP (bbox/dates)
          MODE="PROJECT"
          if [ -z "${INAT_PROJECT_SLUG:-}" ]; then
            if [ -n "${TRIP_BBOX:-}" ] || [ -n "${TRIP_D1:-}" ] || [ -n "${TRIP_D2:-}" ]; then
              MODE="TRIP"
            else
              echo "::error::Provide INAT_PROJECT_SLUG or any TRIP_* input"
              ok=0
            fi
          fi
          echo "Computed MODE=$MODE"
          echo "OBS_TABLE=${OBS_TABLE:-observations}"
          echo "OBS_ID_COLUMN=${OBS_ID_COLUMN:-inat_obs_id}"
          echo "OBS_UPDATED_AT_COLUMN=${OBS_UPDATED_AT_COLUMN:-updated_at}"

          [ "$ok" = "1" ] || exit 1

      - name: Supabase reachability
        shell: bash
        env:
          K: ${{ secrets.SUPABASE_SERVICE_KEY || secrets.SUPABASE_SECRET_KEY || secrets.SUPABASE_SERVICE_ROLE_KEY || vars.SUPABASE_SERVICE_KEY || vars.SUPABASE_SECRET_KEY || vars.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          set -euo pipefail
          echo '=== Supabase Reachability Test ==='
          URL="$SUPABASE_URL/rest/v1/config_filters?select=id&limit=1"
          echo "GET $URL"
          r=$(curl -sS -w '\n%{http_code}' -H "apikey: $K" -H "Authorization: Bearer $K" "$URL" || true)
          code="${r##*$'\n'}"
          body="${r%$'\n'*}"
          echo "http $code body: $body"
          if [ "${code:-000}" -ge 400 ]; then
            echo "::error::Supabase API unreachable"; exit 1
          fi
          echo '✓ Supabase API reachable'

      - name: Run ingest with retries
        shell: bash
        run: |
          set -e
          for i in 1 2 3; do
            if node ingest.mjs; then
              echo '✅ ingest ok'
              exit 0
            fi
            if [ $i -lt 3 ]; then
              sleep_sec=$(( (RANDOM % 7 + 5) * i ))
              echo "⚠️  transient failure, retry #$i (sleeping ${sleep_sec}s)"
              sleep $sleep_sec
            fi
          done
          echo '::error::Ingest failed after 3 attempts'
          exit 1
