name: Ingest iNaturalist Data and Score

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  data-pipeline:
    name: Fetch, Ingest, and Process Data
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js LTS (v20)
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies
        # Ensures 'dotenv' (and others) are installed (requires package.json to be correct)
        run: npm install

      # =================================================================
      # CRITICAL FIX: Variable Mapping and Aliases in .env Synthesis
      # The script error "Missing database environment variables" indicates
      # it is looking for conventional names like 'DATABASE_URL'.
      # =================================================================
      - name: Create .env file from Secrets (Quoted and Aliased)
        run: |
          echo "Synthesizing .env file with robust quoting and variable mapping..."
          # Format: KEY="VALUE" (Quoting handles special characters)

          # Supabase SDK variables
          printf "SUPABASE_URL=\"%s\"\n" "${{ secrets.SUPABASE_URL }}" > .env
          printf "SUPABASE_SERVICE_ROLE_KEY=\"%s\"\n" "${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" >> .env

          # Database Connection Variables (Using the Pooler URL)
          # We capture the Pooler URL secret into a local variable for cleaner reuse
          POOLER_URL="${{ secrets.SUPABASE_POOL_URL }}"

          # Provide the Pooler URL under the Supabase-specific name
          printf "SUPABASE_DB_URL=\"%s\"\n" "$POOLER_URL" >> .env

          # CRITICAL FIX: Provide the Pooler URL under conventional names
          printf "DATABASE_URL=\"%s\"\n" "$POOLER_URL" >> .env
          printf "POSTGRES_URL=\"%s\"\n" "$POOLER_URL" >> .env

          # iNaturalist and Application variables
          printf "INAT_BASE=\"%s\"\n" "${{ secrets.INAT_BASE }}" >> .env
          printf "ASSIGNMENT_IDS=\"%s\"\n" "${{ secrets.ASSIGNMENT_IDS }}" >> .env
          printf "RATE_LIMIT_RPS=\"%s\"\n" "${{ secrets.RATE_LIMIT_RPS }}" >> .env
          printf "NODE_ENV=\"production\"\n" >> .env

          echo ".env file created successfully."

      # Optional Diagnostic
      - name: Verify .env file structure (Masked)
        run: cat .env

      # =================================================================
      # Execution Step (Using forced preloading)
      # =================================================================
      - name: Run Data Ingestion
        # Force loading the .env file before the script starts
        run: node -r dotenv/config ingest.mjs
