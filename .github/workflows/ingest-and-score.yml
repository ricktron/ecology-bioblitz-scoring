name: Ingest iNat and Score v6

on:
  workflow_dispatch:
  # schedule:
  #   - cron: "*/30 * * * *"
  push:
    paths:
      - ".github/workflows/ingest-and-score.yml"
      - "ingest.mjs"
      - "sql/**"

permissions:
  contents: read

concurrency:
  group: ingest-and-score
  cancel-in-progress: true

jobs:
  ingest-and-score:
    runs-on: ubuntu-latest

    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      INAT_BASE: ${{ secrets.INAT_BASE }}
      ASSIGNMENT_IDS: ${{ secrets.ASSIGNMENT_IDS }}
      RATE_LIMIT_RPS: ${{ secrets.RATE_LIMIT_RPS }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Run iNat ingestion script
        shell: bash
        run: |
          set -euo pipefail
          node ingest.mjs

      - name: Install psql client and dnsutils
        shell: bash
        run: |
          set -e
          sudo apt-get update -y
          sudo apt-get install -y postgresql-client dnsutils

      - name: Debug shell DB secrets presence
        shell: bash
        env:
          SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
          SUPABASE_POOL_URL: ${{ secrets.SUPABASE_POOL_URL }}
        run: |
          set -e
          for k in SUPABASE_DB_URL SUPABASE_POOL_URL; do
            if [ -n "${!k:-}" ]; then echo "$k: SET"; else echo "$k: (missing)"; fi
          done

      - name: Choose DB URL and handshake (IPv4)
        id: pickdb
        shell: bash
        env:
          DB_URL_DIRECT: ${{ secrets.SUPABASE_DB_URL }}
          DB_URL_POOL:   ${{ secrets.SUPABASE_POOL_URL }}
        run: |
          set -euo pipefail

          parse_url () {
            python3 - "$1" <<'PY'
import sys, urllib.parse as U
u = U.urlparse(sys.argv[1])
print(u.username or '')
print(u.password or '')
print(u.hostname or '')
print(str(u.port or 5432))
print((u.path or '/').lstrip('/').split('/')[0])
print(('?' in sys.argv[1]) and '&' or '?')
PY
          }

          try_one () {
            local url="$1" label="$2"
            if [ -z "$url" ]; then
              echo "::warning::Empty URL for $label"
              return 1
            fi

            read -r UUSER UPASS UHOST UPORT UDB QJOIN < <(parse_url "$url")

            echo "::group::Handshake $label"
            echo "Host : $UHOST"
            echo "Port : $UPORT"
            echo "DB   : $UDB"
            echo "User : $UUSER"

            IPv4="$(dig +short A "$UHOST" | head -1 || true)"
            if [ -z "$IPv4" ]; then
              echo "::warning::No IPv4 A record for $UHOST"
              echo "::endgroup::"
              return 1
            fi
            echo "IPv4 : $IPv4"

            if ! timeout 5 bash -c ">/dev/tcp/$IPv4/$UPORT" 2>/dev/null; then
              echo "::warning::TCP to $IPv4:$UPORT failed"
              echo "::endgroup::"
              return 1
            fi

            export PGPASSWORD="$UPASS" PGSSLMODE=require
            DSN="hostaddr=$IPv4 host=$UHOST port=$UPORT dbname=$UDB user=$UUSER sslmode=require"

            if psql "$DSN" -v VERBOSITY=verbose -Atc "select 1" >/dev/null; then
              echo "use_url=${url}${QJOIN}hostaddr=${IPv4}" >> "$GITHUB_OUTPUT"
              echo "::endgroup::"
              return 0
            fi

            echo "::warning::psql failed for $label"
            echo "::endgroup::"
            return 1
          }

          if try_one "${DB_URL_POOL:-}" "Pooler 6543"; then
            :
          elif try_one "${DB_URL_DIRECT:-}" "Direct 5432"; then
            :
          else
            echo "::error title=DB handshake::Could not reach either DB URL from GitHub Actions."
            echo "Hints:"
            echo "  - Secrets must be full Supabase URIs ending with ?sslmode=require"
            echo "  - Project must be running and ref/region correct"
            echo "  - Network Restrictions open or include GitHub egress"
            exit 2
          fi

      - name: Generate SQL with correct id column
        id: gensql
        shell: bash
        env:
          USE_URL: ${{ steps.pickdb.outputs.use_url }}
        run: |
          set -euo pipefail
          check_col () { psql "$USE_URL" -Atc \
            "select 1 from information_schema.columns where table_schema='public' and table_name='daily_scores' and column_name='$1'" | grep -q 1; }
          if check_col student_id; then ID_COL=student_id
          elif check_col roster_id; then ID_COL=roster_id
          elif check_col person_id; then ID_COL=person_id
          else
            echo "::error title=Missing id column::Need one of: student_id, roster_id, person_id"
            exit 1
          fi
          echo "Detected ID_COL=${ID_COL}"
          sed -e "s/__ID_COL__/${ID_COL}/g" \
            sql/leaderboard_views.template.sql > sql/_gen_leaderboard_views.sql

      - name: Apply or update views
        shell: bash
        env:
          USE_URL: ${{ steps.pickdb.outputs.use_url }}
        run: |
          set -euo pipefail
          echo "Handshake details:"
          psql "$USE_URL" -Atc "select current_user, current_database(), inet_client_addr(), inet_server_addr()" || true
          echo "Applying SQL..."
          psql "$USE_URL" -v ON_ERROR_STOP=1 -f sql/_gen_leaderboard_views.sql
