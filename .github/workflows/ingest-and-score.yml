name: Ingest iNaturalist Data and Score

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  data-pipeline:
    name: Fetch, Ingest, and Process Data
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js LTS (v20)
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies
        run: npm install

      # =================================================================
      # CRITICAL FIX: Correct Key Mapping for Schema Validation
      # The application requires BOTH the Service Role Key AND the Anon Key.
      # We must map the correct secrets to the correct variables.
      # =================================================================
      - name: Create .env file from Secrets (Schema Compliant)
        run: |
          echo "Synthesizing schema-compliant .env file..."
          # Format: KEY="VALUE" (Quoting handles special characters)

          # Capture secrets into local variables
          S_URL="${{ secrets.SUPABASE_URL }}"
          SERVICE_KEY="${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}"
          # CRITICAL: Use the newly added secret for the Anonymous Key
          ANON_KEY="${{ secrets.SUPABASE_ANON_KEY }}"
          POOLER_URL="${{ secrets.SUPABASE_POOL_URL }}"

          # --- Supabase SDK Variables ---
          # Standard backend names
          printf "SUPABASE_URL=\"%s\"\n" "$S_URL" > .env
          printf "SUPABASE_SERVICE_ROLE_KEY=\"%s\"\n" "$SERVICE_KEY" >> .env
          printf "SUPABASE_ANON_KEY=\"%s\"\n" "$ANON_KEY" >> .env

          # Framework conventions (Next.js, Vite) - These require the Anon Key for public access
          printf "NEXT_PUBLIC_SUPABASE_URL=\"%s\"\n" "$S_URL" >> .env
          printf "NEXT_PUBLIC_SUPABASE_ANON_KEY=\"%s\"\n" "$ANON_KEY" >> .env
          printf "VITE_SUPABASE_URL=\"%s\"\n" "$S_URL" >> .env
          printf "VITE_SUPABASE_ANON_KEY=\"%s\"\n" "$ANON_KEY" >> .env

          # Generic Aliases (Use Service Key for generic backend access if needed)
          printf "SUPABASE_KEY=\"%s\"\n" "$SERVICE_KEY" >> .env

          # --- Database Connection Variables (Using the Pooler URL) ---
          # Supabase-specific and Conventional names (PostgreSQL/Prisma)
          printf "SUPABASE_DB_URL=\"%s\"\n" "$POOLER_URL" >> .env
          printf "DATABASE_URL=\"%s\"\n" "$POOLER_URL" >> .env
          printf "POSTGRES_URL=\"%s\"\n" "$POOLER_URL" >> .env

          # --- iNaturalist and Application variables ---
          printf "INAT_BASE=\"%s\"\n" "${{ secrets.INAT_BASE }}" >> .env
          printf "ASSIGNMENT_IDS=\"%s\"\n" "${{ secrets.ASSIGNMENT_IDS }}" >> .env
          printf "RATE_LIMIT_RPS=\"%s\"\n" "${{ secrets.RATE_LIMIT_RPS }}" >> .env
          printf "NODE_ENV=\"production\"\n" >> .env

          echo ".env file created successfully."

      # Optional Diagnostic
      - name: Verify .env file structure (Masked)
        run: cat .env

      # =================================================================
      # Execution Step (Using forced preloading)
      # =================================================================
      - name: Run Data Ingestion
        # Force loading the .env file before the script starts
        run: node -r dotenv/config ingest.mjs
