name: Ingest iNat and Score â€¢ vENVDEBUG4

on:
  workflow_dispatch:   # manual runs while we debug

permissions:
  contents: read

concurrency:
  group: ingest-and-score
  cancel-in-progress: true

jobs:
  ingest-and-score:
    runs-on: ubuntu-latest

    env:
      # Supabase HTTP API (for ingest.mjs)
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      # Aliases your script may read
      SB_URL: ${{ secrets.SUPABASE_URL }}
      SB_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

      # iNat / runtime knobs (ok if unset)
      INAT_BASE: ${{ secrets.INAT_BASE }}
      ASSIGNMENT_IDS: ${{ secrets.ASSIGNMENT_IDS }}
      RATE_LIMIT_RPS: ${{ secrets.RATE_LIMIT_RPS }}

      # Postgres (for psql)
      SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}      # 5432 URI with ?sslmode=require
      SUPABASE_POOL_URL: ${{ secrets.SUPABASE_POOL_URL }}  # 6543 URI with ?sslmode=require

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Debug (shell): API secrets presence
        run: |
          set -e
          for k in SUPABASE_URL SUPABASE_SERVICE_ROLE_KEY SB_URL SB_KEY INAT_BASE ASSIGNMENT_IDS RATE_LIMIT_RPS; do
            if [ -n "${!k:-}" ]; then echo "$k: SET"; else echo "$k: EMPTY"; fi
          done

      - name: Debug (node): does Node see the env?
        run: |
          node -e "console.log({
            SUPABASE_URL: !!process.env.SUPABASE_URL,
            SUPABASE_SERVICE_ROLE_KEY: !!process.env.SUPABASE_SERVICE_ROLE_KEY,
            SB_URL: !!process.env.SB_URL,
            SB_KEY: !!process.env.SB_KEY
          })"

      - name: Run iNat ingestion script
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          SB_URL: ${{ secrets.SUPABASE_URL }}
          SB_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          INAT_BASE: ${{ secrets.INAT_BASE }}
          ASSIGNMENT_IDS: ${{ secrets.ASSIGNMENT_IDS }}
          RATE_LIMIT_RPS: ${{ secrets.RATE_LIMIT_RPS }}
        run: |
          set -euo pipefail
          node ingest.mjs

      - name: Install psql client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Debug (shell): DB secrets presence
        run: |
          set -e
          for k in SUPABASE_DB_URL SUPABASE_POOL_URL; do
            if [ -n "${!k:-}" ]; then echo "$k: SET"; else echo "$k: EMPTY"; fi
          done

      - name: Choose DB URL and handshake
        id: pickdb
        run: |
          set -euo pipefail
          try() {
            url="$1"
            host_redacted=$(printf '%s' "$url" | sed -E 's@//[^:@/]*:.*@//REDACTED@')
            echo "Trying: $host_redacted"
            psql -4 "$url" -v VERBOSITY=verbose -c "\conninfo"
            psql -4 "$url" -Atc "select 1"
          }
          if [ -n "${SUPABASE_DB_URL:-}" ] && try "$SUPABASE_DB_URL"; then
            USE_URL="$SUPABASE_DB_URL"
          elif [ -n "${SUPABASE_POOL_URL:-}" ] && try "$SUPABASE_POOL_URL"; then
            USE_URL="$SUPABASE_POOL_URL"
          else
            echo "DB handshake failed. Check SUPABASE_DB_URL or SUPABASE_POOL_URL."
            echo "Tip: reset DB password in Supabase and either URL-encode special chars or use a simple password."
            exit 1
          fi
          echo "use_url=$USE_URL" >> "$GITHUB_OUTPUT"
          echo "Handshake OK."

      - name: Generate SQL with correct id column
        run: |
          set -euo pipefail
          USE_URL="${{ steps.pickdb.outputs.use_url }}"
          ID_COL=$(psql -4 "$USE_URL" -Atc "
            select column_name
            from information_schema.columns
            where table_schema='public'
              and table_name='daily_scores'
              and column_name in ('student_id','roster_id','person_id')
            limit 1;")
          if [ -z "$ID_COL" ]; then
            echo 'Could not detect id column in public.daily_scores'; exit 1
          fi
          sed "s/__ID_COL__/$ID_COL/g" sql/leaderboard_views.template.sql > sql/_gen_leaderboard_views.sql
          echo "Detected ID_COL=$ID_COL and generated sql/_gen_leaderboard_views.sql"

      - name: Apply / update views (idempotent)
        run: |
          set -euo pipefail
          USE_URL="${{ steps.pickdb.outputs.use_url }}"
          psql -4 "$USE_URL" -v ON_ERROR_STOP=1 -f sql/_gen_leaderboard_views.sql
