name: Ingest iNat and Score

on:
  workflow_dispatch:
  # schedule:
  #   - cron: "*/30 * * * *"
  push:
    paths:
      - ".github/workflows/ingest-and-score.yml"
      - "ingest.mjs"
      - "sql/**"

permissions:
  contents: read

concurrency:
  group: ingest-and-score
  cancel-in-progress: true

jobs:
  ingest-and-score:
    runs-on: ubuntu-latest

    env:
      # Supabase HTTP API used by ingest.mjs
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

      # Ingestion knobs
      INAT_BASE: ${{ secrets.INAT_BASE }}
      ASSIGNMENT_IDS: ${{ secrets.ASSIGNMENT_IDS }}
      RATE_LIMIT_RPS: ${{ secrets.RATE_LIMIT_RPS }}

      # Database URLs (set as Actions secrets)
      SUPABASE_DB_URL:   ${{ secrets.SUPABASE_DB_URL }}
      SUPABASE_POOL_URL: ${{ secrets.SUPABASE_POOL_URL }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install deps if present
        shell: bash
        run: |
          set -e
          if [ -f package-lock.json ]; then npm ci
          elif [ -f package.json ]; then npm i
          else echo "No package.json found; skipping"
          fi

      - name: Run ingestion script
        shell: bash
        run: |
          set -euo pipefail
          node ingest.mjs

      - name: Install psql client and dnsutils
        shell: bash
        run: |
          set -e
          sudo apt-get update -y
          sudo apt-get install -y postgresql-client dnsutils

      - name: Debug secrets presence
        shell: bash
        run: |
          set -e
          for k in SUPABASE_DB_URL SUPABASE_POOL_URL; do
            if [ -n "${!k:-}" ]; then echo "$k=SET"; else echo "$k=MISSING"; fi
          done

      - name: Choose DB URL and handshake
        id: pickdb
        shell: bash
        env:
          DB_URL_DIRECT: ${{ env.SUPABASE_DB_URL }}
          DB_URL_POOL:   ${{ env.SUPABASE_POOL_URL }}
        run: |
          set -euo pipefail

          # prefer pooler if provided
          USE_URL=""
          if [ -n "${DB_URL_POOL:-}" ]; then
            if PGPASSWORD="$(python3 - <<'PY'
import sys,urllib.parse as U
u=U.urlparse(sys.argv[1]); print(u.password or "")
PY
            "$DB_URL_POOL")" PGSSLMODE=require psql "$DB_URL_POOL" -Atc "select 1" >/dev/null 2>&1; then
              USE_URL="$DB_URL_POOL"
            fi
          fi

          if [ -z "$USE_URL" ] && [ -n "${DB_URL_DIRECT:-}" ]; then
            if PGPASSWORD="$(python3 - <<'PY'
import sys,urllib.parse as U
u=U.urlparse(sys.argv[1]); print(u.password or "")
PY
            "$DB_URL_DIRECT")" PGSSLMODE=require psql "$DB_URL_DIRECT" -Atc "select 1" >/dev/null 2>&1; then
              USE_URL="$DB_URL_DIRECT"
            fi
          fi

          if [ -z "$USE_URL" ]; then
            echo "Could not reach either DB URL from the runner."
            echo "Hints:"
            echo "  - Secrets must be exact postgres URLs ending with ?sslmode=require"
            echo "  - Project must be running (not paused)"
            echo "  - Network Restrictions must allow GitHub Actions egress"
            exit 2
          fi

          echo "use_url=$USE_URL" >> "$GITHUB_OUTPUT"

      - name: Generate SQL with correct id column
        id: gensql
        shell: bash
        env:
          USE_URL: ${{ steps.pickdb.outputs.use_url }}
        run: |
          set -euo pipefail
          check_col () {
            psql "$USE_URL" -Atc "select 1 from information_schema.columns \
              where table_schema='public' and table_name='daily_scores' and column_name='$1'" | grep -q 1
          }

          if   check_col student_id; then ID_COL=student_id
          elif check_col roster_id;  then ID_COL=roster_id
          elif check_col person_id;  then ID_COL=person_id
          else
            echo "daily_scores must have one of: student_id, roster_id, person_id"
            exit 1
          fi

          echo "Detected ID_COL=${ID_COL}"
          sed -e "s/__ID_COL__/${ID_COL}/g" \
            sql/leaderboard_views.template.sql > sql/_gen_leaderboard_views.sql

      - name: Apply or update views
        shell: bash
        env:
          USE_URL: ${{ steps.pickdb.outputs.use_url }}
        run: |
          set -euo pipefail
          psql "$USE_URL" -v ON_ERROR_STOP=1 -f sql/_gen_leaderboard_views.sql
