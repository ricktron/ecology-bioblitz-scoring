name: Ingest iNat and Score

on:
  workflow_dispatch:
  schedule:
    - cron: "*/30 * * * *"
  push:
    paths:
      - .github/workflows/ingest-and-score.yml
      - scripts/**
      - sql/**

permissions:
  contents: read

concurrency:
  group: ingest-and-score
  cancel-in-progress: true

jobs:
  ingest-and-score:
    runs-on: ubuntu-latest
    env:
      SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
      SUPABASE_POOL_URL: ${{ secrets.SUPABASE_POOL_URL }}
      INAT_APP_ID: ${{ secrets.INAT_APP_ID }}
      INAT_APP_SECRET: ${{ secrets.INAT_APP_SECRET }}
      INAT_USERNAME: ${{ secrets.INAT_USERNAME }}
      INAT_PASSWORD: ${{ secrets.INAT_PASSWORD }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install deps (ok if none)
        run: |
          set -e
          if [ -f package-lock.json ]; then npm ci
          elif [ -f package.json ]; then npm i
          else echo "No package.json found; skipping"
          fi

      - name: Run iNat ingestion script
        run: |
          set -euo pipefail
          if [ -f scripts/ingest_inat.mjs ]; then
            node scripts/ingest_inat.mjs
          elif [ -f scripts/ingest_inat.js ]; then
            node scripts/ingest_inat.js
          else
            echo "Ingest script not found (scripts/ingest_inat.mjs|.js). Skipping ingest step."
          fi

      - name: Install psql client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Choose DB URL (direct or pool) + handshake
        id: pickdb
        run: |
          set -euo pipefail
          USE_URL="${SUPABASE_DB_URL:-}"
          if [ -n "$USE_URL" ]; then
            if ! psql -4 "$USE_URL" -Atc "select 1" >/dev/null 2>&1; then
              if [ -n "${SUPABASE_POOL_URL:-}" ] && psql -4 "$SUPABASE_POOL_URL" -Atc "select 1" >/dev/null 2>&1; then
                USE_URL="$SUPABASE_POOL_URL"
              else
                echo "DB handshake failed. Check SUPABASE_DB_URL or SUPABASE_POOL_URL secrets."; exit 1
              fi
            fi
          else
            if [ -n "${SUPABASE_POOL_URL:-}" ]; then
              USE_URL="$SUPABASE_POOL_URL"
            else
              echo "No DB URL secret set."; exit 1
            fi
          fi
          echo "use_url=$USE_URL" >> "$GITHUB_OUTPUT"
          echo "Handshake OK on selected URL."

      - name: Generate SQL with correct id column
        run: |
          set -euo pipefail
          USE_URL="${{ steps.pickdb.outputs.use_url }}"
          ID_COL=$(psql -4 "$USE_URL" -Atc "
            select column_name
            from information_schema.columns
            where table_schema='public'
              and table_name='daily_scores'
              and column_name in ('student_id','roster_id','person_id')
            limit 1;")
          if [ -z "$ID_COL" ]; then
            echo 'Could not detect id column in public.daily_scores'; exit 1
          fi
          echo "Detected ID_COL=$ID_COL"
          if [ ! -f sql/leaderboard_views.template.sql ]; then
            echo "Missing sql/leaderboard_views.template.sql"; exit 1
          fi
          sed "s/__ID_COL__/$ID_COL/g" sql/leaderboard_views.template.sql > sql/_gen_leaderboard_views.sql
          echo "Generated sql/_gen_leaderboard_views.sql"

      - name: Apply / update views (idempotent)
        run: |
          set -euo pipefail
          USE_URL="${{ steps.pickdb.outputs.use_url }}"
          echo "Handshake details:"
          psql -4 "$USE_URL" -Atc "select current_user, current_database(), inet_server_addr(), inet_client_addr(), version();"
          psql -4 "$USE_URL" -v ON_ERROR_STOP=1 -f sql/_gen_leaderboard_views.sql
