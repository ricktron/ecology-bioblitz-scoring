name: Ingest iNat and Score • vENVDEBUG4

on:
  workflow_dispatch:
  # While debugging, you can comment out the schedule below to reduce noise:
  # schedule:
  #   - cron: "*/30 * * * *"
  push:
    paths:
      - .github/workflows/ingest-and-score.yml
      - ingest.mjs
      - sql/**

permissions:
  contents: read

concurrency:
  group: ingest-and-score
  cancel-in-progress: true

jobs:
  ingest-and-score:
    runs-on: ubuntu-latest

    env:
      # Supabase HTTP API (used by ingest.mjs) – set as Actions secrets
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      # Aliases your script originally checked:
      SB_URL: ${{ secrets.SUPABASE_URL }}
      SB_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

      # iNat knobs (if your script uses them)
      INAT_BASE: ${{ secrets.INAT_BASE }}
      ASSIGNMENT_IDS: ${{ secrets.ASSIGNMENT_IDS }}
      RATE_LIMIT_RPS: ${{ secrets.RATE_LIMIT_RPS }}

      # Postgres (for psql)
      SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}      # 5432 URI with ?sslmode=require
      SUPABASE_POOL_URL: ${{ secrets.SUPABASE_POOL_URL }}  # 6543 URI with ?sslmode=require

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install deps (ok if none)
        run: |
          set -e
          if [ -f package-lock.json ]; then npm ci
          elif [ -f package.json ]; then npm i
          else echo "No package.json found; skipping"
          fi

      - name: Debug (shell): API secrets presence
        run: |
          for k in SUPABASE_URL SUPABASE_SERVICE_ROLE_KEY SB_URL SB_KEY INAT_BASE ASSIGNMENT_IDS RATE_LIMIT_RPS; do
            if [ -n "${!k:-}" ]; then echo "$k: SET"; else echo "$k: EMPTY"; fi
          done

      - name: Debug (node): does Node see the env?
        run: |
          node -e "console.log({
            SUPABASE_URL: !!process.env.SUPABASE_URL,
            SUPABASE_SERVICE_ROLE_KEY: !!process.env.SUPABASE_SERVICE_ROLE_KEY,
            SB_URL: !!process.env.SB_URL,
            SB_KEY: !!process.env.SB_KEY
          })"

      - name: Run iNat ingestion script
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          SB_URL: ${{ secrets.SUPABASE_URL }}
          SB_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          INAT_BASE: ${{ secrets.INAT_BASE }}
          ASSIGNMENT_IDS: ${{ secrets.ASSIGNMENT_IDS }}
          RATE_LIMIT_RPS: ${{ secrets.RATE_LIMIT_RPS }}
        run: |
          set -euo pipefail
          node ingest.mjs

      - name: Install psql client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Debug (shell): DB secrets presence
        run: |
          for k in SUPABASE_DB_URL SUPABASE_POOL_URL; do
            if [ -n "${!k:-}" ]; then echo "$k: SET"; else echo "$k: EMPTY"; fi
          done

      - name: Choose DB URL and handshake
        id: pickdb
        shell: bash
        run: |
          set -euo pipefail
          USE_URL=""

          if [ -n "${SUPABASE_DB_URL:-}" ]; then
            echo "Trying direct URI (5432)…"
            if psql -4 "$SUPABASE_DB_URL" -Atc "select 1" >/dev/null 2>&1; then
              USE_URL="$SUPABASE_DB_URL"
            else
              echo "Direct URI failed."
            fi
          fi

          if [ -z "$USE_URL" ] && [ -n "${SUPABASE_POOL_URL:-}" ]; then
            echo "Trying pooler URI (6543)…"
            if psql -4 "$SUPABASE_POOL_URL" -Atc "select 1" >/dev/null 2>&1; then
              USE_URL="$SUPABASE_POOL_URL"
            else
              echo "Pooler URI failed."
            fi
          fi

          if [ -z "$USE_URL" ]; then
            echo "DB handshake failed. Check SUPABASE_DB_URL and/or SUPABASE_POOL_URL."
            echo "• Use postgres user + your **database password** (not API key)."
            echo "• Include '?sslmode=require'."
            echo "• If the password has special chars (@:/?#&+%), URL-encode it or reset to a simple one."
            exit 1
          fi

          echo "use_url=$USE_URL" >> "$GITHUB_OUTPUT"
          echo "Handshake OK."

      - name: Generate SQL with correct id column
        run: |
          set -euo pipefail
          USE_URL="${{ steps.pickdb.outputs.use_url }}"
          ID_COL=$(psql -4 "$USE_URL" -Atc "
            select column_name
            from information_schema.columns
            where table_schema='public'
              and table_name='daily_scores'
              and column_name in ('student_id','roster_id','person_id')
            limit 1;")
          if [ -z "$ID_COL" ]; then
            echo 'Could not detect id column in public.daily_scores'; exit 1
          fi
          echo "Detected ID_COL=$ID_COL"
          if [ ! -f sql/leaderboard_views.template.sql ]; then
            echo "Missing sql/leaderboard_views.template.sql"; exit 1
          fi
          sed "s/__ID_COL__/$ID_COL/g" sql/leaderboard_views.template.sql > sql/_gen_leaderboard_views.sql
          echo "Generated sql/_gen_leaderboard_views.sql"

      - name: Apply / update views (idempotent)
        run: |
          set -euo pipefail
          USE_URL="${{ steps.pickdb.outputs.use_url }}"
          echo "Handshake details:"
          psql -4 "$USE_URL" -Atc "select current_user, current_database(), inet_server_addr(), inet_client_addr(), version();"
          psql -4 "$USE_URL" -v ON_ERROR_STOP=1 -f sql/_gen_leaderboard_views.sql
